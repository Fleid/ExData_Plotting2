install.packages("swirl")
> library("swirl")
library("swirl")
library(swirl)
swirl()
my_vector <- as.vector(1:20)
info()
?as
my_vector
my_vector <- 1:20
my_vector
dim(my_vector)
legnth(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vecotr
my_vector
class(my_vector)
my_matrix <- my_vector
install.packages("rpostgresql")
install.packages("rmysql")
install.packages("rmysql")
install.packages("rmysql", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL")
library(RMySQL)
install.packages("RPostgreSQL")
library("RCurl")library("RJSONIO")# Accept SSL certificates issued by public Certificate Authoritiesoptions(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))h = basicTextGatherer()req = list(Id="score00001",           Instance=list(FeatureVector=                             list(                                 "NbPieces"= "0",                                 "Superficie m2"= "0",                                 "Arrondissement"= "0"                             )                         ,                         GlobalParameters=                             fromJSON('{}')           ))body = toJSON(req)api_key = "abc123" # Replace this with the API key for the web serviceauthz_hdr = paste('Bearer', api_key, sep=' ')h$reset()curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",            httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),            postfields=body,            writefunction = h$update,            verbose = TRUE)result = h$value()print(result)
library("RCurl")library("RJSONIO")
install.packages("RCurl")
install.packages("RJSONIO")
library("RCurl")library("RJSONIO")# Accept SSL certificates issued by public Certificate Authoritiesoptions(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))h = basicTextGatherer()req = list(Id="score00001",           Instance=list(FeatureVector=                             list(                                 "NbPieces"= "0",                                 "Superficie m2"= "0",                                 "Arrondissement"= "0"                             )                         ,                         GlobalParameters=                             fromJSON('{}')           ))body = toJSON(req)api_key = "abc123" # Replace this with the API key for the web serviceauthz_hdr = paste('Bearer', api_key, sep=' ')h$reset()curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",            httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),            postfields=body,            writefunction = h$update,            verbose = TRUE)result = h$value()print(result)
library("RCurl")library("RJSONIO")
library("RCurl")
library("RJSONIO")
options(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "0",
"Superficie m2"= "0",
"Arrondissement"= "0"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "abc123" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h = basicTextGatherer()
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "0",
"Superficie m2"= "0",
"Arrondissement"= "0"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "abc123" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
api_key = "igI9Kobb6uwCt31TXPhDYJI2kK30oZJbRfHj94UZoDpXkee4X+nVDwnrVrac+TsuI0nMlOSUSueqwJYMosYG+g==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "3",
"Superficie m2"= "60",
"Arrondissement"= "Paris 15e"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "igI9Kobb6uwCt31TXPhDYJI2kK30oZJbRfHj94UZoDpXkee4X+nVDwnrVrac+TsuI0nMlOSUSueqwJYMosYG+g==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
GlobalParameters=
;
library("RCurl")
library("RJSONIO")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "0",
"SuperficieM2"= "0",
"PrixEuro"= "0",
"Arrondissement"= "0",
"CodePostal"= "0"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "i+298tmkI7OfaRVNQUIqig4NVKN+LXfB9E7BZZd9EaKTR3xIa/Nj5W6Hx44ZQWrPI6RcoSw95Pdv1ip3bABBqw==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/7b1ad4d3b7da48b49339c184d5e12d7e/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
irquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
setwd("~/Documents/GitHub/ExData_Plotting2")
source('~/.active-rstudio-document')
NEI <- readRDS("summarySCC_PM25.rds")
setwd("~/Documents/GitHub/ExData_Plotting2")
setwd("~/Documents/GitHub/ExData_Plotting2")
NEI <- readRDS("~/exdata-data-NEI_data/summarySCC_PM25.rds")
NEI <- readRDS("~/exdata-data-NEI_data/summarySCC_PM25.rds")
NEI <- readRDS("/exdata-data-NEI_data/summarySCC_PM25.rds")
NEI <- readRDS("exdata-data-NEI_data/summarySCC_PM25.rds")
SCC <- readRDS("exdata-data-NEI_data/Source_Classification_Code.rds")
head(NEI)
describe(NEI)
summary(NEI)
aggreagate(NEI$Emissions, by=list(NEI$year))
aggregate(NEI$Emissions, by=list(NEI$year))
aggregate(NEI$Emissions, by=list(NEI$year), FUN = sum)
# Histogram drawing
png("plot1.png",width= 480, height = 480,  units= "px")
hist(p1$year,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons")
dev.off()
p1 <- aggregate(NEI$Emissions, by=list(NEI$year), FUN = sum)
png("plot1.png",width= 480, height = 480,  units= "px")
hist(p1$year,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons")
dev.off()
summary(p1)
names(p1) <- c("Year","Emissions")
hist(p1$year,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons")
hist(p1$Emissions,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons")
plot(x = p1$Year, y = p1$Emissions,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons")
hist(x = p1$Year, y = p1$Emissions,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons")
hist(breaks = p1$Year,x  = p1$Emissions,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons")
barplot(p1)
p1
barplot(p1,beside=FALSE)
?p1
as.matrix(p1)
barplot(as.matrix(p1))
barplot(as.matrix(p1),beside=FALSE)
barplot(table(p1$Tear,p1$Emissions))
barplot(table(p1$Year,p1$Emissions))
table(p1$Year,p1$Emissions)
barplot(as.matrix(p1))
as.matrix(p1)
?barplot
barplot(as.matrix(p1),beside=FALSE)
as.matrix(as.matrix(p1)$Emissions)
p2 <- as.matrix(p1)
p2
p2$Emissions
p1$Emissions
p1$Emissions,p1$Year
(p1$Emissions,p1$Year)
as.matrix(p1$Emissions,p1$Year)
barplot(t(as.matrix(p1)),beside=FALSE)
p2 <- t(as.matrix(p1))
barplot(p2,beside=FALSE)
barplot(p2,beside=FALSE,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons")
barplot(p2,beside=FALSE,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons",names=p2[,2])
p2[,2]
p2[2,]
p2[1,]
barplot(p2,beside=FALSE,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons",names=p2[1,])
barplot(p2,beside=FALSE,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons",names=p2[1,], cex = .7)
barplot(p2,beside=FALSE,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons",names=p2[1,],las=2)
barplot(p2,beside=FALSE,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons",names=p2[1,],las=2,options("scipen" = 20))
barplot(p2,beside=FALSE,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons",names=p2[1,],las=2,options("scipen" = 20))
barplot(p2,beside=FALSE,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons",names=p2[1,],las=2)
options("scipen" = 20)
axis(2, at = pts, labels = paste(pts, "MM", sep = ""))
axis(1)
pts <- pretty(x / 10000000)
axis(2, at = pts, labels = paste(pts, "MM", sep = ""))
dev.off()
barplot(p2,beside=FALSE,col="red",main="Total PM2.5 Emissions per Year",xlab="Year", ylab="Tons",names=p2[1,],las=2)
